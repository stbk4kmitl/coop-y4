




def create_leaf_tables():
    conn = psycopg2.connect(DATABASE_URL)
    cur = conn.cursor()

    # ขั้นตอนที่ 1: ดึงข้อมูล result_type และ device_names จากตาราง device_phycon ที่ตรงกับประเภท M&S และ SRV Leaf
    cur.execute("""
        SELECT result_type, device_names 
        FROM device_phycon 
        WHERE result_type IN (
            'M&S Leaf M', 'M&S Leaf S', 'M&S Leaf N01', 
            'SRV Leaf M', 'SRV Leaf S', 'SRV Leaf N01'
        );
    """)
    leaf_data = cur.fetchall()  # ดึงข้อมูลทั้งหมด
    leaf_names = []
    device_counters = {}

    # ขั้นตอนที่ 2: สร้างตารางตาม result_type และ device_names พร้อม prefix
    for result_type, device_name in leaf_data:
        if 'SNK' in device_name:
            prefix = 'snk'
        elif 'RST' in device_name:
            prefix = 'rst'
        elif 'TYB' in device_name:
            prefix = 'tyb'
        else:
            prefix = 'default'

        # แยกประเภท M&S และ SRV ตาม Leaf
        if 'M&S Leaf M' in result_type:
            suffix = 'm_ms'
        elif 'M&S Leaf S' in result_type:
            suffix = 's_ms'
        elif 'M&S Leaf N01' in result_type:
            suffix = 'n_ms'
        elif 'SRV Leaf M' in result_type:
            suffix = 'm_srv'
        elif 'SRV Leaf S' in result_type:
            suffix = 's_srv'
        elif 'SRV Leaf N01' in result_type:
            suffix = 'n_srv'
        else:
            suffix = 'default'

        # ตรวจสอบและเพิ่มตัวนับสำหรับแต่ละประเภท
        key = f"{prefix}_{suffix}"
        if key not in device_counters:
            device_counters[key] = 1
        else:
            device_counters[key] += 1

        # สร้างชื่อตารางตามตัวนับ
        table_name = f"{key}_leaf_{str(device_counters[key]).zfill(2)}"
        leaf_names.append(table_name)

        # สร้างตารางในฐานข้อมูล
        cur.execute(f"""
            CREATE TABLE IF NOT EXISTS {table_name} (
                port_id SERIAL PRIMARY KEY,
                port TEXT,
                device_names TEXT,
                rack_position TEXT,
                connections TEXT
            );
        """)
        print(f'Created table: {table_name}')

    conn.commit()

    # ขั้นตอนที่ 3: เพิ่มข้อมูล 52 แถวในแต่ละตาราง
    for table_name in leaf_names:
        # ลูปเพื่อแทรกข้อมูล 52 แถว
        for i in range(1, 57):  # Loop ตั้งแต่ 1 ถึง 52
            cur.execute(f"""
                INSERT INTO {table_name} (port) VALUES (NULL);
            """)

        # ลูปเพื่ออัปเดตข้อมูล port ในแต่ละแถว
        for i in range(1, 57):
            cur.execute(f"""
                UPDATE {table_name}
                SET port = '0/1/1/' || {i}
                WHERE port_id = {i};
            """)

    conn.commit()
    cur.close()
    print('def: create_leaf_tables')
    return leaf_names









def insert_data_to_ms_leaf(leaf_names):
    conn = psycopg2.connect(DATABASE_URL)
    cur = conn.cursor()
    
    m_for_ms = []
    m_for_srv = []
    s_for_ms = []
    s_for_srv = []
    n_for_ms = []
    n_for_srv = []

    # รายการ result_type ที่ต้องการเพิ่มค่า device_names ซ้ำ
    duplicate_result_types = ['RH OCP Support', 'Server Backup', 'Server VAScanner', 'Server EMS FW']

    # ฟังก์ชันตรวจสอบและเก็บข้อมูลตาม zone_letter และ type_hw
    def fetch_and_store(zone_letter, ms_list, srv_list):
        # ดึงข้อมูลจาก device_phycon ที่ตรงกับ zone_letter
        cur.execute("""
            SELECT device_names, result_type
            FROM device_phycon
            WHERE SUBSTRING(device_names FROM POSITION('50' IN device_names) + 2 FOR 1) = %s;
        """, (zone_letter,))
        devices = cur.fetchall()

        # ตรวจสอบ _ms ใน leaf_names และเก็บข้อมูลใน ms_list
        if any('_ms' in leaf_table for leaf_table in leaf_names):
            for device_name, result_type in devices:
                cur.execute("SELECT type_hw FROM map_ms WHERE type_hw = %s;", (result_type,))
                ms_match = cur.fetchone()
                if ms_match:
                    # ตรวจสอบเงื่อนไขสำหรับการเพิ่ม device_names ซ้ำ
                    if result_type in duplicate_result_types:
                        ms_list.append((device_name, result_type))  # เพิ่มครั้งแรก
                    ms_list.append((device_name, result_type))  # เพิ่มครั้งที่สอง (หรือครั้งแรกหากไม่อยู่ใน duplicate_result_types)

        # ตรวจสอบ _srv ใน leaf_names และเก็บข้อมูลใน srv_list
        if any('_srv' in leaf_table for leaf_table in leaf_names):
            for device_name, result_type in devices:
                cur.execute("SELECT type_hw FROM map_srv WHERE type_hw = %s;", (result_type,))
                srv_match = cur.fetchone()
                if srv_match:
                    srv_list.append((device_name, result_type))

    # เรียกใช้ฟังก์ชัน fetch_and_store สำหรับแต่ละ zone_letter
    fetch_and_store('M', m_for_ms, m_for_srv)
    fetch_and_store('S', s_for_ms, s_for_srv)
    fetch_and_store('N', n_for_ms, n_for_srv)

    # แสดงผลลัพธ์ที่ได้
    print("M for MS Matches:", m_for_ms)
    print('........................')
    print("M for SRV Matches:", m_for_srv)
    print('........................')
    print('........................')
    print("S for MS Matches:", s_for_ms)
    print('........................')
    print("S for SRV Matches:", s_for_srv)
    print('........................')
    print('........................')
    print("N for MS Matches:", n_for_ms)
    print('........................')
    print("N for SRV Matches:", n_for_srv)
    print('........................')
    print('........................')

  


@app.route('/leaf')
def leaf():
    #leaf
    create_leaf_tables()
    leaf_table_names = create_leaf_tables()
    insert_data_to_ms_leaf(leaf_table_names)

    return render_template('leaf.html')




    
